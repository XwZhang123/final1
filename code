import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torchvision.models import ResNet18_Weights

# CIFAR-100 数据集
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5070751592371323, 0.48654887331495095, 0.4409178433670343), 
                          (0.2673342858792401, 0.2564384629170883, 0.27615047132568404))])

trainset = torchvision.datasets.CIFAR100(root='./data', train=True,
                                         download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR100(root='./data', train=False,
                                        download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=100,
                                         shuffle=False, num_workers=2)

classes = trainset.classes

import torch.nn.functional as F
from torchvision import models

class SimCLR(nn.Module):
    def __init__(self, base_model, out_dim):
        super(SimCLR, self).__init__()
        self.backbone = base_model
        self.projector = nn.Sequential(
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, out_dim)
        )

    def forward(self, x):
        h = self.backbone(x)
        z = self.projector(h)
        return h, z

def nt_xent_loss(out_1, out_2, temperature):
    out_1 = F.normalize(out_1, dim=1)
    out_2 = F.normalize(out_2, dim=1)
    out = torch.cat([out_1, out_2], dim=0)
    sim_matrix = torch.exp(torch.mm(out, out.t().contiguous()) / temperature)
    mask = (torch.ones_like(sim_matrix) - torch.eye(2 * out_1.size(0), device=sim_matrix.device)).bool()
    sim_matrix = sim_matrix.masked_select(mask).view(2 * out_1.size(0), -1)
    
    pos_sim = torch.exp(torch.sum(out_1 * out_2, dim=-1) / temperature)
    pos_sim = torch.cat([pos_sim, pos_sim], dim=0)
    
    loss = -torch.log(pos_sim / sim_matrix.sum(dim=-1))
    return loss.mean()

# 数据增强
class SimCLRDataTransform:
    def __init__(self, base_transform):
        self.base_transform = base_transform
    
    def __call__(self, x):
        return self.base_transform(x), self.base_transform(x)

simclr_transform = transforms.Compose([
    transforms.RandomResizedCrop(size=32),
    transforms.RandomHorizontalFlip(),
    transforms.RandomApply([transforms.ColorJitter(0.4, 0.4, 0.4, 0.1)], p=0.8),
    transforms.RandomGrayscale(p=0.2),
    transforms.ToTensor()
])

trainset_ssl = torchvision.datasets.CIFAR100(root='./data', train=True,
                                             download=True, transform=SimCLRDataTransform(simclr_transform))
trainloader_ssl = torch.utils.data.DataLoader(trainset_ssl, batch_size=256,
                                              shuffle=True, num_workers=2)

device = 'cuda' if torch.cuda.is_available() else 'cpu'
resnet = models.resnet18(weights=None)
resnet.fc = nn.Identity()
model = SimCLR(resnet, out_dim=128).to(device)
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# TensorBoard记录
from torch.utils.tensorboard import SummaryWriter

def train_simclr():
    writer = SummaryWriter()
    num_epochs = 200
    temperature = 0.5

    for epoch in range(num_epochs):
        model.train()
        total_loss = 0
        for (x_i, x_j), _ in trainloader_ssl:
            x_i, x_j = x_i.to(device), x_j.to(device)
            h_i, z_i = model(x_i)
            h_j, z_j = model(x_j)
            
            loss = nt_xent_loss(z_i, z_j, temperature)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            
            total_loss += loss.item()
        
        avg_loss = total_loss / len(trainloader_ssl)
        writer.add_scalar('Loss/train', avg_loss, epoch)
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {avg_loss:.4f}')

    writer.close()

if __name__ == '__main__':
    train_simclr()

    # 冻结预训练的模型特征提取部分
    for param in model.backbone.parameters():
        param.requires_grad = False

    # 线性分类器
    linear_classifier = nn.Linear(512, 100).to(device)
    optimizer = torch.optim.Adam(linear_classifier.parameters(), lr=0.001)
    criterion = nn.CrossEntropyLoss()

    # TensorBoard记录
    writer = SummaryWriter()

    num_epochs = 200

    for epoch in range(num_epochs):
        model.eval()
        linear_classifier.train()
        total_loss = 0
        correct = 0
        total = 0
        
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)
            with torch.no_grad():
                features, _ = model.backbone(images)
            
            outputs = linear_classifier(features)
            loss = criterion(outputs, labels)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            
            total_loss += loss.item()
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
        
        train_accuracy = 100. * correct / total
        writer.add_scalar('Accuracy/train', train_accuracy, epoch)
        writer.add_scalar('Loss/train', total_loss / len(trainloader), epoch)
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {total_loss/len(trainloader):.4f}, Accuracy: {train_accuracy:.2f}%')

    # 测试阶段
    linear_classifier.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in testloader:
            images, labels = images.to(device), labels.to(device)
            features, _ = model.backbone(images)
            outputs = linear_classifier(features)
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()

    test_accuracy = 100. * correct / total
    print(f'Test Accuracy: {test_accuracy:.2f}%')

    writer.close()

    # 从ImageNet上预训练的模型
    imagenet_resnet = models.resnet18(weights=ResNet18_Weights.IMAGENET1K_V1)
    imagenet_resnet.fc = nn.Identity()
    imagenet_resnet = imagenet_resnet.to(device)

    # 线性分类器
    linear_classifier_imagenet = nn.Linear(512, 100).to(device)
    optimizer = torch.optim.Adam(linear_classifier_imagenet.parameters(), lr=0.001)
    criterion = nn.CrossEntropyLoss()

    # 训练和评估代码同上
